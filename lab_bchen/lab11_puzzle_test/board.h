#ifndef BOARD_H
#define BOARD_H

#include <iostream>
#include <map>
#include <functional>
/**A Board class that stores a list of tile values in a one dimensional array*/

class Board
{
 public:
  /** Default Constructor. Constructs a 2x2 board solved Board.*/
  Board(); 

/** Init a board of given size and scramble it with numInitMoves 
 * by moving the space tile with a randomly chosen direction N, W, S, E
 * some of which may be invalid, in which case we skip that move 
 * 
 *  @param size Number of tiles for the game.  \
 *      Should be a perfect square (4, 16, 25)
 *  @param numInitMoves Number of tile moves to attempt to scramble the board
 *  @param seed Use to seed the random number generator (srand) 
 */
  Board(int size, int numInitMoves, int seed);

  /** Deep Copy Constructor. Constructs a deep copy of the Board. Dynamically allocates tiles.
 *  @param b A reference to the Board you want to copy using a deep copy.
 */
  Board(const Board &b);

  /** Another Deep Copy Constructor. Constructs a deep copy of the Board. Dynamically allocates tiles.
 *  @param tiles A pointer to the tiles list that you want to copy.
 *  @param size The size of the tile list you are passing in the first parameter.
 */
  Board(int *tiles, int size); 

  /** Destructor. Destroys the dynamically created tiles.*/
  ~Board();

/** Swaps tile with specified tile. Move will only move the tile in the given parameter if the tile is
 *  		 visually adjacent to the blank tile spot.
 *  @param tile The value of the tile you want to move on the board. Not the index.
 */
  bool move(int tile);

  /** Creates a map of potential moves. Function finds the blank tile and looks at its adjacent members.
  * Key=tile, Value=Ptr to corresponding Board 
   *  @return Returns a copy of the map generated by potential moves which contains an integer key and a Board pointer.
   */
  std::map<int, Board*> potentialMoves(); 

 /** Checks if the Board is solved by comparing the values with the index. If the values of each tile are the same as the index
 * they are in then return true;
 *  @return Returns true if Board is solved. Returns false if Board is not.
 */
  bool solved();

  // Operators
  /** Outputs the board by printing each row on separate lines and a space between each column.
 *  @param os A reference to the ostream like "cout"
 *  @param b A reference to the board you want to print out.
 *  @return Returns a reference ostream allowing output functions like cout to utilize the << function.
 */
  friend std::ostream& operator<<(std::ostream &os, const Board &b);
  
/** Checks if the the current Board is equal to the Board in the parameter by comparing each of their values in the corresponding indicies.
 * @param rhs the right hand side of the board being compared to. 
 * @return Returns a pointer to the list of values in the board.
 */
  bool operator==(const Board& rhs) const;
  /** Less than operator overload. Compares the first tile from each board that is not equal to the the tile of the other board
 *  in the same index.
 *  @param rhs Board on the right hand side of the equation when comparing two boards.
 *  @return Returns true if Board is less than the other Board. Returns false if not.
 */
  bool operator<(const Board& rhs) const;
  /** Comparison to check if the Boards are not equal to each other by calling the == operator overload.
 *  @param rhs The right hand side of the comparison.
 *  @return Returns false if the Boards are not equal to each other.
 */
  bool operator!=(const Board& rhs) const;
  
  // Accessors
  /** Getter function returning the tile list.
 *  @return Returns a pointer to the list of values in the board.
 */
  int* getTiles() const;
  /** Getter function returning the size of the tile list.
 *  @return Returns the size of the tile list.
 */
  int getSize() const;

 private:
  int *tiles_; //Stores all the tiles in the board class.
  int size_; //Size of the tile list.
};

// Leave this alone and don't touch it!
struct BoardLessThan : 
  public std::binary_function<const Board*, const Board*,bool>
{
  bool operator()(const Board *b1, const Board *b2) const
  {
    return *b1 < *b2;
  }
};



#endif
